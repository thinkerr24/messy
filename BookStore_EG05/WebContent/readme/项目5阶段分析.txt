在项目中使用Session

	1、验证码[防止重复提交+恶意攻击]
		- 导入kaptcha jar包
		- 在web.xml中配置KaptchaServlet并设置初始化的参数
		- 在注册页面中的img标签访问Servlet并显示验证码图片
		- 给验证码图片绑定单击时间，点击可以切换图片
			只要修改img标签dom对象的src属性值就能修改图片
	
		1.1 访问code.jpg时Servlet会先创建一个验证码字符串并存到Session中，key就是KAPTCHA_SESSION_KEY
			再将字符串转为验证码图片作为响应结果
		1.2 用户在注册页面中根据注册验证码图片输入了字符串提交请求给服务器
		1.3 服务器获取用户提交的验证码字符串和服务器session中的验证码比较
			如果相同可以注册
			如果不同，重复提交或验证码错误，不让注册，给用户错误提示
		1.4 session中的验证码使用后需要移除。
	2、保持登录状态+注销
		用户提交登录请求到UserServlet中如果判断登录成功将查询到的用户对象存到session域中
		- 在用户访问的页面根据用户的状态显示页面的右上角的登录信息
		
		- 用户点击注销时，提交注销请求给UserServlet.logout()
			只需要销毁session对象即可
			user_header.jsp页面的超链接请求需要提交给UserServlet.logout	
	3、购物车+订单
		购物车：基于Session实现的
			一个浏览器在访问服务器时，如果需要购买商品。服务器可以给此浏览器分配一个购物车对象[一一对应]
			将购物车所有的需要显示的数据封装到一个类中
				Cart类：购物车类
					//List<CartItem> list = new ArrayList();   购物车中的购物项的集合
								由于后面的业务会对集合中的购物项进行增删改的操作，所以希望能够快速定位一个元素
								所以使用Map< String bookId, CartItem item>保存购物项的集合
										map的key可以使用购物项中图书的id
										图书id和购物项是一一对应的关系
					Map< String bookId, CartItem item> map = new LinkedHashMap<String, CartItem>();
					int  totalCount;商品总数量
					double totalAmount; 购物项商品总金额
					- 由于购物车是存在Session中的没有service层和Dao层，所以将和购物车相关的业务方法封装到Cart类中
					
					
					
				CartItem类： 购物项类
				    Book book;
					int count;
					double amount;
	
			3.1 完成添加图书到购物车的功能
				点击首页的加入购物车超链接，请求提交给CartServlet处理
					- 将购物车数据存到session域中共享
					- 点击加入购物车 
						先判断浏览器在服务器的session中有没有对应的购物车对象
							如果有，将图书添加到已存在的购物车中
							如果没有，新创建购物车对象，并将购物车对象设置到session中，再将图书添加到购物车中
				修改加入购物车超链接  点击提交请求给CartServlet.addBook方法
				
				
		4、完成结账功能	
			cart.jsp页面点击去结账超链接，应该去处理结账请求	
				- 判断用户是否登录
					如果未登录跳转到登录页面提示登录
					如果已登录继续
				-  将购物车中的数据转为订单数据存到数据库中	
					由于一个购物车中有多个购物项，数据不方便存到一张表中
					购物车转为订单数据存到订单表中，订单表可以外键关联用户id，决定一个订单属于哪个用户
						购物车和订单一对一的关系，用户和订单是一对多的关系
					购物车中的购物项数据存到订单项表中
						购物车和购物项是一对多的关系
						购物项和订单项一对一的关系
						一个订单可以有多个订单项
						订单项可以通过外键关联订单的id，决定订单项属于哪个订单
				- 购物车中的数据转为订单后需要清空
				- 购买后图书的销量库存也应该修改
				- 结账成功返回订单编号显示到页面中
			表示层：
				OrderClientServlet
					checkOut();  处理结账请求的方法
				
			业务层
				OrderService
					String createOrder(Cart cart , User user); 创建订单的业务方法
			
			DAO层		
				OrderDao
					int saveOrder(Order order);保存订单到数据库的方法
				OrderItemDao
					int saveOrderItem(OrderItem item); 保存订单项到的方法
			
			bs_order
			bs_orderitem
			
			对应表创建实体类
			Order
			OrderItem
			4.1 创建表+实体类
				bs_order  订单表，由购物车转换而来
					varchar id  订单编号， 主键     手动拼接  时间戳+用户id
					DateTime order_time 订单创建的时间  
					double total_amount  订单商品总金额
					int total_count 订单商品总数量
					int state  订单的状态    0 未发货   1已发货  2交易完成 
					int user_id 订单所属用户的id  [外键和bs_user表的id字段关联]
				bs_orderitem 订单项表 ， 由购物项转换而来     需要记录购买当时的商品信息
					int id 订单项id
					varchar title; 购买时的图书信息
					varchar author;
					varchar img_path;
					double price;
					int count;
					double amount;
					varchar order_id;  订单项所属订单的id    外键关联 order表的id字段
				CREATE TABLE bs_order(
				 id VARCHAR(100) PRIMARY KEY ,
				 order_time DATETIME ,
				 total_amount DOUBLE(11,2) ,
				 total_count INT(11),
				 state INT(2),
				 user_id INT(11),
				 FOREIGN KEY(user_id) REFERENCES bs_user(id)
				);
				
				
				CREATE TABLE bs_orderitem(
				 id INT(11) PRIMARY KEY AUTO_INCREMENT,
				 title VARCHAR(100) ,
				 author VARCHAR(100) ,
				 img_path VARCHAR(100) , 
				 price DOUBLE(11,2) ,
				 COUNT INT(11),
				 amount DOUBLE(11,2),
				 order_id VARCHAR(100),
				 FOREIGN KEY (order_id) REFERENCES bs_order(id)
				);
			4.2 创建操作表的DAO
				OrderDao
					保存订单到表中的数据：int saveOrder(Order order);
					用户根据id查询自己订单的方法： List<Order> getOrdersByUserId(int userId);
					管理员查询所有订单的方法： List<Order> getAllOrders();
					修改订单状态的方法：  int updateOrderState(String orderId , int state);
				OrderItemDao
					保存订单项到数据库的方法：int saveOrderItem(OrderItem item);
					根据订单id查询该订单的订单项的方法：List<OrderItem> getOrderItemsByOrderId(String orderId);
			4.3 完成结账功能
				OrderClientServlet:
					checkOut(); 
						- 判断用户是否登录
						- 获取session中的参数：cart对象 ， user对象
						- 调用service的业务方法处理结账的业务[将购物车转为订单对象，购物项转为订单项，订单和用户关联，清空购物车，修改图书的销量库存]
						- 根据业务处理的结果给用户响应
				OrderService:
					String createOrder(Cart cart , User user);
						- 将购物车转为订单对象，购物项转为订单项，订单和用户关联，清空购物车，修改图书的销量库存
						
			4.4 完成查询用户订单的功能
				OrderClientServlet:
						- 判断用户是否登录
						
				OrderService:
			4.5 完成管理员查询所有的订单的功能	
			
			-- 修改订单的状态			
			4.5 完成管理员发货的功能[state: 0-1]
			
			4.6 完成用户的收货功能[state:1 - 2]	
			4.7 使用批处理  批量插入订单项+批量更新图书的销量库存	
					在BookDao和OrderItemDao中提供批处理的方法
					OrderServiceImpl创建订单时，保存订单项和更新销量库存使用批处理方法优化
					
					